@using _01_MiPrimeraApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2;

@inject HttpClient http
@inject NavigationManager navigationManager;

@inject SweetAlertService Swal;

<EditForm Model=tipoLibro OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@

    <div class="mb-3">
        <label class="form-label">ID</label>
        <InputNumber @bind-Value=tipoLibro.ID class="form-control" readOnly />
    </div>

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText @bind-Value=tipoLibro.Nombre class="form-control" />
        <ValidationMessage For="@(() => tipoLibro.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputText @bind-Value=tipoLibro.Descripcion class="form-control" />
        <ValidationMessage For="@(() => tipoLibro.Descripcion)" />
    </div>

    @*<button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Guardar
        </button>

        <NavLink href="/tiposLibro">
            <button type="button" class="btn btn-danger">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
        </NavLink>*@

    <BotoneraBasica PaginaVolver="@paginaEnviar" />
</EditForm>

@code {
    [Parameter]
    public _01_MiPrimeraApp.Shared.TipoLibro tipoLibro { get; set; } = new _01_MiPrimeraApp.Shared.TipoLibro();

    private string paginaEnviar;


    public async Task Guardar()
    {
        bool editando = tipoLibro.ID != 0;
        bool continuar = true;

        if (editando)
        {


            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "Guardarás los cambios sobre el tipo de libro",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",

            });

            continuar = !string.IsNullOrEmpty(result.Value);
        }

        if (continuar)
        {
            var respuesta = await http.PostAsJsonAsync("api/TipoLibro/Save", tipoLibro);

            var content = await respuesta.Content.ReadFromJsonAsync<object>();

            int rpta = int.Parse(content.ToString());

            if (editando)
            {
                await Swal.FireAsync(
                    "Cambios realizados",
                    "Los cambios se han guardado correctamente",
                    SweetAlertIcon.Success
                    );
            }

            if (rpta == 1)
            {
                navigationManager.NavigateTo(paginaEnviar);
            }

        }
        //else if (result.Dismiss == DismissReason.Cancel)
        //{
        //    await Swal.FireAsync(
        //      "Cancelled",
        //      "Your imaginary file is safe :)",
        //      SweetAlertIcon.Error
        //      );
        //}

        //var respuesta = await http.PostAsJsonAsync("api/TipoLibro/Save", tipoLibro);

        //var content = await respuesta.Content.ReadFromJsonAsync<object>();

        //int rpta = int.Parse(content.ToString());

        //if (rpta == 1)
        //{
        //    navigationManager.NavigateTo("/tiposLibro");
        //}
    }


    protected override async Task OnInitializedAsync()
    {
        paginaEnviar = "tiposLibro";

        int idPagina = await http.GetJsonAsync<int>($"api/Pagina/GetId/{paginaEnviar}");
        paginaEnviar = $"/{paginaEnviar}/{idPagina}";

    }
}