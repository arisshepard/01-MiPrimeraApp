@using _01_MiPrimeraApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2

@inject HttpClient http;
@inject NavigationManager navigationManager
@inject SweetAlertService Swal

<EditForm Model=Persona OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">ID</label>
        <InputNumber @bind-Value=Persona.ID class="form-control" readOnly />
    </div>

    <div class="mb-3">
        <label class="form-label">Nombre</label>
        <InputText @bind-Value=Persona.NombreSimple class="form-control" />
        <ValidationMessage For="@(() => Persona.NombreSimple )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Primer Apellido</label>
        <InputText @bind-Value=Persona.PrimerApellido class="form-control" />
        <ValidationMessage For="@(() => Persona.PrimerApellido )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Segundo Apellido</label>
        <InputText @bind-Value=Persona.SegundoApellido class="form-control" />
        <ValidationMessage For="@(() => Persona.SegundoApellido )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Teléfono</label>
        <InputText @bind-Value=Persona.Telefono class="form-control" />
        <ValidationMessage For="@(() => Persona.Telefono )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText @bind-Value=Persona.Email class="form-control" />
        <ValidationMessage For="@(() => Persona.Email )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha Nacimiento</label>
        <InputDate @bind-Value=Persona.Fecha class="form-control" />
        <ValidationMessage For="@(() => Persona.Fecha )" />
    </div>

    <div class="mb-3">
        <label class="form-label">Usuario</label>
        <InputText @bind-Value=Persona.NombreUsuario class="form-control" />
        <ValidationMessage For="@(() => Persona.NombreUsuario )" />
    </div>

    @if (contraseñaVisible)
    {
        <div class="mb-3">
            <label class="form-label">Contraseña</label>
            <InputText @bind-Value=Persona.PasswordUsuario class="form-control" type="password" />
            <ValidationMessage For="@(() => Persona.PasswordUsuario )" />
        </div>
    }

    @if (tipoUsuarioVisible)
    {

        <div class="mb-3">
            <label class="form-label">Tipo Usuario</label>
            <InputSelect @bind-Value=Persona.IDTipoUsuario class="form-control form-select">
                <option value="">-- Seleccione --</option>
                @foreach (var tipo in TiposUsuario)
                    {
                    <option value=@tipo.ID>@tipo.Nombre</option>
                    }
            </InputSelect>
            <ValidationMessage For="@(() => Persona.IDTipoUsuario)" />
        </div>
    }

    <BotoneraBasica PaginaVolver="@paginaEnviar" />
</EditForm>

@code {
    #region "Parámetros"
    [Parameter]
    public Persona Persona { get; set; } = new Persona();

    [Parameter]
    public List<TipoUsuario> TiposUsuario { get; set; } = new List<TipoUsuario>();

    [Parameter]
    public bool contraseñaVisible { get; set; } = true;

    [Parameter]
    public bool tipoUsuarioVisible { get; set; } = true;

    private string paginaEnviar;

    [Parameter] public string RutaEnviar { get; set; }

    #endregion

    #region "Métodos"
    //public async Task Guardar()
    //{
    //    var respuesta = await http.PostAsJsonAsync("api/Persona/Save", Persona);

    //    var content = await respuesta.Content.ReadFromJsonAsync<object>();

    //    int rpta = int.Parse(content.ToString());

    //    if (rpta == 1)
    //    {
    //        if (!string.IsNullOrEmpty(RutaEnviar))
    //        {
    //            navigationManager.NavigateTo(RutaEnviar);
    //        }
    //        else
    //        {
    //            navigationManager.NavigateTo("/personas");

    //        }
    //    }
    //}

    private async Task Guardar()
    {
        bool editando = Persona.ID != 0;
        bool continuar = true;

        if (editando)
        {

            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "Guardarás los cambios sobre la persona",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",

            });

            continuar = !string.IsNullOrEmpty(result.Value);
        }

        if (continuar)
        {
            HttpResponseMessage respuestaHttp;

            respuestaHttp = await http.PostAsJsonAsync("api/Persona/Save", Persona);

            var content = await respuestaHttp.Content.ReadFromJsonAsync<object>();

            int rpta = int.Parse(content.ToString());

            if (rpta == 1)
            {
                await Swal.FireAsync(
                  "Hecho",
                  "Los cambios han sido guardados correctamente.",
                  SweetAlertIcon.Success
                  );

                if (!string.IsNullOrEmpty(RutaEnviar))
                {
                    navigationManager.NavigateTo(RutaEnviar);
                }
                else
                {
                    navigationManager.NavigateTo(paginaEnviar);
                }
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        paginaEnviar = "personas";

        int idPagina = await http.GetJsonAsync<int>($"api/Pagina/GetId/{paginaEnviar}");
        paginaEnviar = $"/{paginaEnviar}/{idPagina}";

    }
    #endregion
}