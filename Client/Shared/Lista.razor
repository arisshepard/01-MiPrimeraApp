@inject NavigationManager navigation;
@inject IJSRuntime jsRuntime;

@using System.IO;

@using OfficeOpenXml;
@using OfficeOpenXml.Style;
@using iText.Pdfa;
@using iText.Kernel.Pdf;
@using iText.Layout;
@using iText.Layout.Element;

@using Syncfusion.DocIO;
@using Syncfusion.DocIO.DLS;

@if (Cargando)
{
    <div class="alert alert-info text-center" role="alert">
        <i class="fas fa-sync-alt fa-spin" />
        <p>Cargando datos, por favor espere...</p>
    </div>
}
else
{
<div class="btn-toolbar justify-content-md-end mb-3">
    @if (permitirAgregar)
    {

        <NavLink href="@rutaAgregar">
            <button class="btn btn-primary fas fa-plus me-2"></button>
        </NavLink>

    }

    @if (Datos != null && Datos.Any() && PermitirExportarEXCEL)
    {
        @*<a class="btn btn-secondary fas fa-file-csv" @onclick="ExportarExcel" href=@Excel></a>*@

        <NavLink href=@Excel>
            <button class="btn btn-success fas fa-file-csv me-2" @onclick="ExportarExcel"></button>
        </NavLink>

    }

    @if (Datos != null && Datos.Any() && PermitirExportarWord)
    {
        <NavLink href=@Word>
            <button class="btn btn-primary fas fa-file-word me-2" @onclick="ExportarWord"></button>
        </NavLink>
    }

    @if (Datos != null && Datos.Any() && PermitirExportarPDF)
    {
        <NavLink href=@PDF>
            <button class="btn btn-danger fas fa-file-pdf" @onclick="ExportarPDF"></button>
        </NavLink>
    }
</div>

    @if (Datos == null || !Datos.Any())
    {
        <div class="alert alert-warning text-center" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            <p>No se han encontrado datos</p>
        </div>
    }
    else
    {        

        @if (Tipo != "none")
        {
            <nav class="navbar navbar-light bg-light mb-3">
                <div class="container-fluid">
                    <label class="mb-2 mb-lg-0">
                        Show
                        <select name="example_length" aria-controls="example" @bind-value="numeroRegistrosPagina" @onchange="CambiarRegistrosPagina" @bind-value:event="oninput">
                            <option value="3">3</option>
                            <option value="5">5</option>
                            <option value="8">8</option>
                            <option value="10">10</option>
                        </select>
                        entries
                    </label>
                    <form class="d-flex">
                        @if (Tipo == "text")
                        {

                            @if (Boton)
                            {
                                <input class="form-control me-2" type="search" placeholder=@Mensaje @bind-value=TextoBusqueda @bind-value:event="oninput">
                                <button class="btn btn-outline-success ml-3" @onclick="Busqueda">Buscar</button>
                            }
                            else
                            {
                                <input class="form-control me-2" type="search" placeholder=@Mensaje @bind-value=TextoBusqueda @bind-value:event="oninput" @onkeyup="Busqueda">
                            }
                        }
                        else if (Tipo == "combobox")
                        {
                            @if (Boton)
                            {
                                <select class="form-control me-2 form-select" @bind-value=TextoBusqueda @bind-value:event="oninput">
                                    @foreach (var item in Combobox)
                                    {
                                        <option value="@item.GetType().GetProperty(ValueMember).GetValue(item)">
                                            @item.GetType().GetProperty(DisplayMember).GetValue(item)
                                        </option>
                                    }
                                </select>
                                <button class="btn btn-outline-success ml-3" @onclick="Busqueda">Buscar</button>
                            }
                            else
                            {
                                <select class="form-control me-2 form-select" @bind-value=TextoBusqueda @bind-value:event="oninput" @onchange="Busqueda">
                                    @foreach (var item in Combobox)
                                    {
                                        <option value="@item.GetType().GetProperty(ValueMember).GetValue(item)">
                                            @item.GetType().GetProperty(DisplayMember).GetValue(item)
                                        </option>
                                    }
                                </select>

                            }
                        }
                    </form>
                </div>
            </nav>
        }

        <div class="table-responsive">
            <table class="table table-borderless align-middle">
                <thead>
                    <tr class="table-primary">
                        @foreach (string cabecera in Cabeceras)
                        {

                            <th>@cabecera</th>
                        }
                        @if (permitirEliminar || permitirEditar)
                        {
                            <th>Operaciones</th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @{
                        List<object> datosPaginados = new List<object>();
                        int indice;

                        // al dar clic al botón
                        if (IndicePaginado > 1)
                        {
                            indice = IndicePaginado;
                        }
                        else
                        {
                            indice = 1;
                        }

                        // Ej. indice 1 (pos 0 a 9)
                        int inicio = indice * numeroRegistrosPagina - numeroRegistrosPagina;
                        int fin = indice * numeroRegistrosPagina;

                        for (int i = inicio; i < fin; i++)
                        {
                            if (i < Datos.Length)
                            {
                                datosPaginados.Add(Datos[i]);
                            }
                        }

                        DatosPaginados = datosPaginados;
                    }

                    @*@foreach (var dato in Datos)*@
                    @foreach (var dato in DatosPaginados)
                    {
                        <tr>
                            @*@foreach (var propiedad in dato.GetType().GetProperties())*@
                            @foreach (var propiedad in ColumnasMostrar)
                            {
                                @*<td>@propiedad.GetValue(dato)</td>*@
                                <td>@dato.GetType().GetProperty(propiedad).GetValue(dato)</td>
                            }
                            <td>
                                @{
                                    //string ID = dato.GetType().GetProperties()[0].GetValue(dato).ToString();
                                    string ID = dato.GetType().GetProperties().Where(property => property.Name.ToUpper() == "ID").First().GetValue(dato).ToString();

                                }
                                <div class="btn-toolbar justify-content-md-center">
                                    @if (permitirEliminar)
                                    {
                                        <button class="btn btn-outline-danger fas fa-trash me-2" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="@(() => PrepararEliminar(ID))"></button>
                                        <MensajeConfirmacion Mensaje=@MensajeConfirmacion Titulo="Eliminar" IDEntidad=@EntidadID eventAceptar="Eliminar" />
                                    }
                                    @if (permitirEditar)
                                    {

                                        @*<NavLink href="@rutaEditar">
                                                <button class="btn btn-primary fas fa-edit ml-1" @onclick="@(() => PrepararEditar(ID))"></button>
                                            </NavLink>*@

                                        <button class="btn btn-outline-primary fas fa-edit" @onclick="@(() => Editar(ID))"></button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @{
                int inicioPaginado = inicio + 1;
                int finPaginado = inicioPaginado + numeroRegistrosPagina - 1;

                if (finPaginado > Datos.Length)
                {
                    finPaginado = Datos.Length;
                }
            }
        </div>

        <div class="btn-toolbar justify-content-md-end my-3 d-flex align-items-center">
            <label class="me-2">Mostrando @inicioPaginado a @finPaginado de @Datos.Length elementos</label>

            <div class="btn-group">
                <span>
                    @for (int i = 1; i <= numeroPaginas(); i++)
                    {
                        int data = i;
                        <button @onclick="@(() => Paginar(data))" class="btn btn-outline-secondary">@i</button>
                    }
                </span>
            </div>
        </div>



    }
}

@code {
    [Parameter]
    public string[] Cabeceras { get; set; }

    // Todos los datos
    [Parameter]
    public object[] Datos { get; set; }

    [Parameter]
    public object[] Combobox { get; set; } = null;
    [Parameter]
    public string DisplayMember { get; set; } = null;
    [Parameter]
    public string ValueMember { get; set; } = null;

    [Parameter]
    public bool Cargando { get; set; }

    // Búsqueda
    [Parameter]
    public string Tipo { get; set; } = "none";

    [Parameter]
    public bool Boton { get; set; } = true;

    [Parameter]
    public EventCallback<string> eventBusqueda { get; set; }

    [Parameter]
    public string Mensaje { get; set; } = "";

    [Parameter]
    public bool permitirAgregar { get; set; } = false;
    [Parameter]
    public bool permitirEditar { get; set; } = false;
    [Parameter]
    public bool permitirEliminar { get; set; } = false;

    [Parameter]
    public string EntidadID { get; set; }

    private string MensajeConfirmacion { get; set; }

    [Parameter]
    public EventCallback<string> eventEditar { get; set; }

    [Parameter]
    public EventCallback<string> eventEliminar { get; set; }

    [Parameter]
    public string rutaAgregar { get; set; }

    [Parameter]
    public string rutaEditar { get; set; }

    private string TextoBusqueda { get; set; }

    [Parameter]
    public string[] ColumnasMostrar { get; set; }

    [Parameter]
    public bool PermitirExportarEXCEL { get; set; }

    [Parameter]
    public bool PermitirExportarPDF { get; set; }

    [Parameter]
    public bool PermitirExportarWord { get; set; }

    [Parameter]
    public string TituloInforme { get; set; }

    // PAGINADO

    // Datos paginados
    public List<object> DatosPaginados { get; set; } = new List<object>();

    public int IndicePaginado { get; set; }

    int numeroRegistrosPagina { get; set; } = 10;

    private string Excel = "";

    private string PDF = "";

    private string Word = "";

    private int numeroPaginas()
    {
        int numeroBotones;
        int numeroRegistros = Datos.Length;

        // 10 registros por página a la alza
        if (numeroRegistros % numeroRegistrosPagina == 0)
        {
            numeroBotones = numeroRegistros / numeroRegistrosPagina;
        }
        else
        {
            numeroBotones = (numeroRegistros / numeroRegistrosPagina) + 1;
        }

        return numeroBotones;

    }

    private void Paginar(int indice)
    {
        IndicePaginado = indice;
    }

    private void Busqueda()
    {
        eventBusqueda.InvokeAsync(TextoBusqueda);
    }

    private void PrepararEditar(string ID)
    {
        EntidadID = ID;
        MensajeConfirmacion = $"¿ Desea eliminar el registro con ID {ID} ?";
        //eventEditar.InvokeAsync(ID);
    }

    private void PrepararEliminar(string ID)
    {
        EntidadID = ID;
        MensajeConfirmacion = $"¿ Desea guardar los cambios del registro con ID {ID} ?";
        //eventEliminar.InvokeAsync(ID);
    }

    private void Eliminar(string ID)
    {
        eventEliminar.InvokeAsync(ID);
    }

    private void Editar(string ID)
    {
        navigation.NavigateTo($"{rutaEditar}/{ID}");
        eventEditar.InvokeAsync(ID);
    }

    private void ExportarExcel()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            using (ExcelPackage ep = new ExcelPackage())
            {
                // valores iniciales
                int fila = 1;
                int columna = 1;

                ep.Workbook.Worksheets.Add("Hoja");
                ExcelWorksheet ew = ep.Workbook.Worksheets[0];

                // Grabar cabeceras
                for (int i = 1; i <= Cabeceras.Length; i++)
                {
                    ew.Column(i).Width = 50;
                    ew.Cells[fila, i].Value = Cabeceras[i - 1];
                }

                fila += 1;

                // Grabar Datos
                foreach (var dato in Datos)
                {
                    columna = 1;
                    foreach (var propiedad in ColumnasMostrar)
                    {
                        ew.Cells[fila, columna].Value = dato.GetType().GetProperty(propiedad).GetValue(dato);
                        columna += 1;
                    }
                    fila += 1;
                }

                ep.SaveAs(ms);

                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                Excel = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64}";
            }
        }
    }

    private void ExportarPDF()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using (PdfDocument pdfDoc = new PdfDocument(writer))
            {
                Document doc = new Document(pdfDoc);
                Paragraph p1 = new Paragraph(TituloInforme);
                p1.SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
                p1.SetFontSize(20);

                doc.Add(p1);

                Table table = new Table(Cabeceras.Length);
                Cell celda;

                for (int i = 0; i < Cabeceras.Length; i++)
                {
                    celda = new Cell();
                    celda.Add(new Paragraph(Cabeceras[i]));
                    table.AddHeaderCell(celda);
                }

                foreach (var dato in Datos)
                {
                    foreach (var propiedad in ColumnasMostrar)
                    {
                        string texto = string.Empty;
                        if (dato.GetType().GetProperty(propiedad).GetValue(dato) != null)
                        {
                            texto = dato.GetType().GetProperty(propiedad).GetValue(dato).ToString();
                        }

                        celda = new Cell();
                        celda.Add(new Paragraph(texto));
                        table.AddCell(celda);
                    }
                }

                doc.Add(table);

                doc.Close();
                writer.Close();

                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                PDF = "data:application/pdf;base64," + base64;

                // Esto hay que darle una vuelta
                jsRuntime.InvokeVoidAsync("descargarPDF", PDF);
            }
        }
    }


    private void ExportarWord()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            WordDocument document = new WordDocument();

            WSection section = document.AddSection() as WSection;

            section.PageSetup.Margins.All = 72;

            IWParagraph paragraph = section.AddParagraph();

            paragraph.ApplyStyle("Normal");
            paragraph.ParagraphFormat.HorizontalAlignment = HorizontalAlignment.Center;
            WTextRange textRange = paragraph.AppendText(TituloInforme) as WTextRange;
            textRange.CharacterFormat.FontSize = 20f;
            textRange.CharacterFormat.FontName = "Calibri";
            textRange.CharacterFormat.TextColor = Syncfusion.Drawing.Color.Blue;

            // Crear table
            IWTable table = section.AddTable();
            int numeroCabeceras = Cabeceras.Length;
            int numeroFilas = Datos.Length;
            table.ResetCells(numeroFilas + 1, numeroCabeceras);

            for (int i = 0; i < numeroCabeceras; i++)
            {
                table[0, i].AddParagraph().AppendText(Cabeceras[i]);
            }

            int fila = 1;
            int columna = 0;
            foreach (var dato in Datos)
            {
                columna = 0;
                foreach (var propiedad in ColumnasMostrar)
                {
                    if (dato.GetType().GetProperty(propiedad).GetValue(dato) != null)
                    {
                        table[fila, columna].AddParagraph().AppendText(dato.GetType().GetProperty(propiedad).GetValue(dato).ToString());
                    }
                    columna++;
                }

                fila++;
            }

            document.Save(ms, FormatType.Docx);

            byte[] buffer = ms.ToArray();
            string base64 = Convert.ToBase64String(buffer);

            Word = $"data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,{base64}";


        }
    }

    private void CambiarRegistrosPagina(ChangeEventArgs e)
    {
        int valorCambiado = int.Parse(e.Value.ToString());
        numeroRegistrosPagina = valorCambiado;
    }
}